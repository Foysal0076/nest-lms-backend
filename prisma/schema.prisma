generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id          Int         @id @default(autoincrement())
  title       TableAccess @default(READ)
  table       String
  description String?

  roles Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String?

  permissions Permission[]
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  phone    String?
  password String

  isVerified Boolean @default(false)
  isBlocked  Boolean @default(false)
  roles      Role[]

  userProfile     UserProfile?
  Login           Login[]
  enrolledCourses Course[]     @relation("StudentCourse")
  taughtCourses   Course[]     @relation("InstructorCourse")
  completedUnits  Unit[]       @relation("CompletedUnit")

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  occupation   String?
  avatar       String?
  state        String?
  city         String?
  country      String?
  addressLine1 String?
  addressLine2 String?
  zipCode      String?
  phone        String?
  dateOfBirth  DateTime?
  gender       String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) //Delete user profile if user is deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionStatusType {
  Active
  Inactive
  Cancelled
  Pending
  Suspended
  Trial
  PastDue
  Free
}

model Subscription {
  id          Int                    @id @default(autoincrement())
  title       String                 @unique
  description String?
  startDate   DateTime
  endDate     DateTime
  nextBilling DateTime
  status      SubscriptionStatusType

  subscriptionProductId Int                 @unique
  subscriptionProduct   SubscriptionProduct @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubscriptionProductType {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String?

  subscriptionProducts SubscriptionProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubscriptionProduct {
  id           Int     @id @default(autoincrement())
  title        String  @unique
  description  String?
  regularPrice Float
  salePrice    Float?
  isSiteWide   Boolean @default(false)

  typeId Int
  type   SubscriptionProductType @relation(fields: [typeId], references: [id])

  courseProviderId Int?
  courseProvider   CourseProvider? @relation(fields: [courseProviderId], references: [id])

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VerificationType {
  Email
  Phone
}

enum TableAccess {
  READ
  WRITE
  DELETE
}

model VerificationRequest {
  id         Int               @id @default(autoincrement())
  type       VerificationType? @default(Email)
  identifier String
  token      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Login {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  lastAtempt     DateTime
  isSuccessful   Boolean
  browserType    String?
  browserVersion String?
  osType         String?
  osVersion      String?
  deviceType     String?
  deviceModel    String?
  ipAddress      String?
  location       String?
}

model CourseCategory {
  id            Int     @id @default(autoincrement())
  title         String  @unique
  slug          String  @unique
  icon          String?
  featuredImage String?
  description   String?

  createdById Int
  courses     Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseLevel {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String?

  createdById Int

  course Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseTag {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String?

  createdById Int

  course Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id               Int     @id @default(autoincrement())
  title            String  @unique
  slug             String  @unique
  shortDescription String?
  longDescription  String?
  whoIsFor         String?
  prerequisite     String?
  learningOutcome  String?
  overview         String?
  featuredImage    String?
  validityInDays   Int?
  regularPrice     Float?
  salePrice        Float?
  isFeatured       Boolean @default(false)
  isPublished      Boolean @default(false)
  isApproved       Boolean @default(false)
  isDeleted        Boolean @default(false)
  moduleOrder      String?

  createdById      Int
  courseProviderId Int
  students         User[]           @relation("StudentCourse")
  instructors      User[]           @relation("InstructorCourse")
  categories       CourseCategory[]

  tags           CourseTag[]
  levels         CourseLevel[]
  courseProvider CourseProvider @relation(fields: [courseProviderId], references: [id], onDelete: Cascade)

  modules Module[]
  Quiz    Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseProvider {
  id               Int     @id @default(autoincrement())
  name             String
  icon             String?
  featuredImage    String?
  shortDescription String?
  longDescription  String?
  url              String?

  courses              Course[]
  subscriptionProducts SubscriptionProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CertificateType {
  General
  Diploma
  Degree
}

model Certificate {
  id            Int             @id @default(autoincrement())
  title         String
  type          CertificateType @default(General)
  icon          String?
  featuredImage String?
  regularPrice  Float           @default(0)
  salePrice     Float           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResourceType {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  icon        String
  description String?

  resource Resource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  contentUrl  String
  isDeleted   Boolean @default(false)
  isFree      Boolean @default(false)

  createdBy Int

  resourceTypeId Int
  resourceType   ResourceType @relation(fields: [resourceTypeId], references: [id])

  unitId Int?
  unit   Unit? @relation(fields: [unitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UnitType {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  icon        String
  description String?

  unit Unit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id          Int     @id @default(autoincrement())
  title       String
  slug        String
  description String?
  videoUrl    String?
  content     String
  duration    Int
  isPublished Boolean @default(false)
  isDeleted   Boolean @default(false)
  isFree      Boolean @default(false)

  createdBy Int

  unitTypeId Int
  unitType   UnitType @relation(fields: [unitTypeId], references: [id])

  moduleId Int?
  module   Module? @relation(fields: [moduleId], references: [id])

  quiz      Quiz?
  resources Resource[]

  completedBy User[] @relation("CompletedUnit")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id          Int     @id @default(autoincrement())
  title       String
  slug        String
  description String?
  isPublished Boolean @default(false)
  isDeleted   Boolean @default(false)

  units Unit[]

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizType {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String?

  quiz Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id             Int     @id @default(autoincrement())
  title          String
  slug           String
  description    String?
  duration       Int
  totalMark      Int
  passMark       Int
  totalQuestions Int
  isPublished    Boolean @default(false)
  isDeleted      Boolean @default(false)

  createdBy Int

  quizTypeId Int
  quizType   QuizType @relation(fields: [quizTypeId], references: [id])

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  unitId Int?  @unique
  unit   Unit? @relation(fields: [unitId], references: [id])

  quizQuestions QuizQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizQuestionType {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String?

  quizQuestions QuizQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizQuestion {
  id          Int     @id @default(autoincrement())
  title       String
  mark        Float   @default(1)
  isPublished Boolean @default(true)
  isDeleted   Boolean @default(false)

  createdBy Int

  quizQuestionTypeId Int
  quizQuestionType   QuizQuestionType @relation(fields: [quizQuestionTypeId], references: [id])

  quizzes     Quiz[]
  quizOptions QuizQuestionOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizQuestionOption {
  id          Int     @id @default(autoincrement())
  title       String
  isCorrect   Boolean @default(false)
  isPublished Boolean @default(true)
  isDeleted   Boolean @default(false)

  createdBy Int

  quizQuestionId Int?
  quizQuestion   QuizQuestion? @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
